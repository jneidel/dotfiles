#! /bin/sh

if [ "$1" = "--help" ] || [ "$1" = "-h" ] || [ "$1" = "help" ] || [ -z "$1" ]; then
  cat <<EOF
$ release TYPE
Prepare a new version for release

Parameters:
  \$1: one of major, minor, patch

Example:
  $ release patch
EOF
  exit
fi

if [ "$1" != "major" ] && [ "$1" != "minor" ] && [ "$1" != "patch" ]; then
  echo "\$1 has to be one of: major, minor, patch"
  exit 1
fi

command -v git >/dev/null || { echo "git is not installed" 1>&2; exit 127; }
command -v $BROWSER >/dev/null || { echo "$BROWSER was not found" 1>&2; exit 127; }

LATEST=$(git tag | tail -n1)
get_version() {
  case $1 in
    patch) echo $LATEST | awk -F. '{ print $1"."$2"."$3+1 }';;
    minor) echo $LATEST | awk -F. '{ print $1"."$2+1".0" }';;
    major) echo $LATEST | awk -F. '{ print "v"$1+1".0.0" }';;
  esac
}
VERSION=$(get_version $1)
URL="https://github.com/jneidel/dotfiles/releases/new?tag=$VERSION&title=Recent%20changes%20to%20my%20dotfiles%20($VERSION)&body=%23%23%20nvim%0A%0A%0A%0A%23%23%20system%0A%0A%0A%0A"

git log $LATEST..HEAD --oneline --no-decorate | {
  while read line; do
    COMMIT_LINE=`echo $line | awk '{ print "- ["substr($0, index($0," ")+1)"](https://github.com/jneidel/dotfiles/commit/"$1")" }'`
    ENCODED_COMMIT_LINE=`node -e "console.log( encodeURIComponent( '$COMMIT_LINE' ) )"`
    URL="${URL}${ENCODED_COMMIT_LINE}%0A"
  done

  $BROWSER "$URL" 2>/dev/null
}
