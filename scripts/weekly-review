#! /bin/sh

DURATIONS_FILE="$ORG_AREAS/org/weekly review/durations.txt"

if [ "$1" = "--help" ] || [ "$1" = "-h" ] || [ "$1" = "help" ]; then
  cat <<EOF
$ weekly-review
Guide me through the Weekly Review

Manipulate the timer with the words:
- pause
- resume
EOF
exit
fi

# helpers
print_header() {
  printf "\033[1;32m$1\033[0m\n"
}
print_control() {
  printf "\033[1;34m$1\033[0m"
}

start_time=$(date +%s)
calc_total_time() {
  end_time=$(date +%s)
  secs_passed=$(($end_time-$start_time))
  mins_passed=$(($secs_passed/60))
  mins_passed_leftover_sec=$(($secs_passed%60))

  print_control "Time passed: ${mins_passed}m ${mins_passed_leftover_sec}s\n"
  echo "Time passed: ${mins_passed}m ${mins_passed_leftover_sec}s" >>"$DURATIONS_FILE"
}
is_paused=0
passed_before_pause=0
pause_timer() {
  if [ "$is_paused" -eq 1 ]; then
    print_control "Timer is already paused\n"
  else
    is_paused=1
    pause_time=$(date +%s)
    passed_before_pause=$(($pause_time-$start_time))
    print_control "[Timer paused]\nContinue the review process with 'resume'\n"
  fi
}
resume_timer() {
  if [ "$is_paused" -eq 0 ]; then
    print_control "Timer is not paused\n"
  else
    is_paused=0
    resume_time=$(date +%s)
    start_time=$(($resume_time-$passed_before_pause))
    print_control "[Timer resumed]\n"
  fi
}

step=0
next_step() {
  step=$(($step+1))
}
next_step

prompt_continue() {
  print_control "Continue? "
  read ans
  case $ans in
    pause)
      pause_timer
      prompt_continue;;
    resume)
      resume_timer
      prompt_continue;;
    *)
      if [ "$is_paused" -eq 1 ]; then
        print_control "\nCan't continue with the timer paused\n"
        prompt_continue
      else
        next_step
        printf "\n"
      fi
      ;;
  esac
}

split_below() {
  local step_name="$1"
  local cmd="$2"

  tmux split-window -v -p 70
  tmux send-keys "clear && figlet $step_name" "Enter" "$cmd" "Enter"
}

# parts of the review
email() {
  print_header "$step. Clear out your email"
  cat <<EOF
outcome:
  - empty kudu inbox

EOF
  kitty --class mosh --name kudu mosh k >/dev/null 2>&1 &
  prompt_continue
}

desk() {
  print_header "$step. Clear out your desk!"
  cat <<EOF
outcome:
  - no paper notes or other TODO items on the desk

EOF
  prompt_continue
}

calendar() {
  print_header "$step. Check your calendar\n"
  cat <<EOF
outcome:
  - past events are in archive.rem

EOF
  lf -remote "send cd '$ORG_RESOURCES/calendar/main'" &

  split_below "Calendar" "rem -b1 -cu+5 -m -@2,0 $(date -d '2 weeks ago' +'%d %b %Y') 2>/dev/null"

  printf "\nShow event calendar next\n"
  prompt_continue

  split_below "Events" "events; rem -b1 -cu+5 -m -@2,0 $(date -d '2 weeks ago' +'%d %b %Y') 2>/dev/null"

  prompt_continue
}

messenger() {
  print_header "$step. Clear out messengers"
  cat <<EOF
outcome:
  - empty signal
  - empty whatsapp

EOF
  prompt_continue
}

browser_tabs() {
  print_header "$step. Close all browser tabs"
  cat <<EOF
outcome:
  - only start page open

EOF
  prompt_continue
}

github() {
  print_header "$step. Clear your GitHub notifications"
  cat <<EOF
outcome:
  - no notifications
  - up-to-date on GitHub newsfeed

EOF
  $BROWSER https://github.com >/dev/null 2>&1 &
  $BROWSER https://github.com/notifications?query=is%3Aunread >/dev/null 2>&1 &

  prompt_continue
}

newsboat() {
  print_header "$step. Clear out newsboat"
  cat <<EOF
outcome:
  - no unread feeds
  - no new patreon posts

EOF
split_below "Newsboat" "new"

prompt_continue
}

files() {
  print_header "$step. Clear temp directories"
  cat <<EOF
outcome:
  - empty ~, Downloads

EOF
lf -remote "send cd '$HOME/Downloads'" &

prompt_continue
}

pre_org_inbox() {
  fetch-annotations &
  signal-to-inbox &
}
org_inbox() {
  print_header "$step. Clear your org inbox"
  cat <<EOF
outcome:
  - $ORG_INBOX is empty

EOF
  echo "$(date +%b%d): <++>m, $(ls $ORG_INBOX/* | wc -l) items" >>"$DURATIONS_FILE"

  lf -remote "send cd '$ORG_INBOX'" &
  prompt_continue
}

task_manager() {
  # excluded because this is seperate for me
  # tasks need their own review process and
  # I need to think about what I want to do over the next week,
  # which I'm not capable off if the weekly review is as long as it currently is
  print_header "$step. Choose your tasks for the week"
  cat <<EOF
outcome:
  - taskwarrior has next weeks tasks scheduled and inbox is emtpy

EOF
split_below "Tasks" "task list"

prompt_continue
}

email
calendar
messenger
github
desk
newsboat
pre_org_inbox
browser_tabs
files
org_inbox

echo "Congrats! You're done"
calc_total_time
