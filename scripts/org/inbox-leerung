#! /bin/sh

DURATIONS_FILE="$ORG_AREAS/org/weekly review/durations.txt"
STATE_FILE="$ORG_AREAS/org/weekly review/.inbox-leerung-state"

if [ "$1" = "--help" ] || [ "$1" = "-h" ] || [ "$1" = "help" ]; then
  cat <<EOF
$ weekly-review
Guide me through the Weekly Review

Manipulate the timer with the words:
- pause
- resume
EOF
exit
fi

items_in_inbox=
start_time=$(date +%s)

# helpers
print_header() {
  printf "\033[1;32m$1\033[0m\n"
}
print_control() {
  printf "\033[1;34m$1\033[0m"
}

step=0
actual_step=0
next_step() {
  step=$(($step+1))
  actual_step=$(($actual_step+1)) # not set by state, see skip_step_based_on_state
}
next_step

should_skip_based_on_state() {
  if [ "$step" != "$actual_step" ]; then
    actual_step=$(($actual_step+1))
    return 1
  fi
}

# state management
update_state() {
  current_time=$(date +%s)
  passed_time=$(($current_time-$start_time))
  echo "$step $passed_time $items_in_inbox" >"$STATE_FILE"
}

get_step_from_state() {
  { cat "$STATE_FILE" 2>/dev/null || echo 1; } | cut -d\  -f1
}
get_duration_from_state() {
  { cat "$STATE_FILE" 2>/dev/null || echo " 0"; } | cut -d\  -f2
}
get_items_from_state() {
  cat "$STATE_FILE" 2>/dev/null | cut -d\  -f3
}

if [ -f "$STATE_FILE" ]; then
  printf "Existing state found: Step $(get_step_from_state). after $(get_duration_from_state)s.\nDo you want to resume from state? (Y/n): "
  read resume_from_state
  if [ "$resume_from_state" = "n" ] || [ "$resume_from_state" = "N" ]; then
    printf "Please confirm to discard the existing state (Y/n): "
    read discard_state
    if [ "$discard_state" != "n" ] && [ "$discard_state" != "N" ]; then
      rm "$STATE_FILE"
    fi
  fi
  step=$(get_step_from_state)
  current_time=$(date +%s)
  start_time=$(($current_time-$(get_duration_from_state)))
  items_in_inbox=$(get_items_from_state)
fi

# time keeping
calc_total_time() {
  end_time=$(date +%s)
  secs_passed=$(($end_time-$start_time))
  mins_passed=$(($secs_passed/60))
  mins_passed_leftover_sec=$(($secs_passed%60))

  print_control "Time passed: ${mins_passed}m ${mins_passed_leftover_sec}s\n"

  echo "$(date +%b%d): ${mins_passed}m, $items_in_inbox items" >>"$DURATIONS_FILE"
  echo "Stats were added to: $DURATIONS_FILE"
  rm "$STATE_FILE"
}
is_paused=0
passed_before_pause=0
pause_timer() {
  if [ "$is_paused" -eq 1 ]; then
    print_control "Timer is already paused\n"
  else
    is_paused=1
    pause_time=$(date +%s)
    passed_before_pause=$(($pause_time-$start_time))
    print_control "[Timer paused]\nContinue the review process with 'resume'\n"
    update_state
  fi
}
resume_timer() {
  if [ "$is_paused" -eq 0 ]; then
    print_control "Timer is not paused\n"
  else
    is_paused=0
    resume_time=$(date +%s)
    start_time=$(($resume_time-$passed_before_pause))
    print_control "[Timer resumed]\n"
  fi
}

prompt_continue() {
  update_state

  print_control "Continue? "
  read ans
  case $ans in
    pause)
      pause_timer
      prompt_continue;;
    resume)
      resume_timer
      prompt_continue;;
    *)
      if [ "$is_paused" -eq 1 ]; then
        print_control "\nCan't continue with the timer paused\n"
        prompt_continue
      else
        next_step
        printf "\n"
      fi
      ;;
  esac
}

split_below() {
  local step_name="$1"
  local cmd="$2"

  tmux split-window -v -l 70%
  tmux send-keys "clear && figlet $step_name" "Enter" "$cmd" "Enter"
}

# parts of the review
email() {
  should_skip_based_on_state || return
  print_header "$step. Clear out your email"
  cat <<EOF
outcome:
  - empty kudu inbox

EOF
  kitty --class mosh --name kudu mosh k >/dev/null 2>&1 &
  prompt_continue
}

desk() {
  should_skip_based_on_state || return
  print_header "$step. Clear out the desk and drawer"
  cat <<EOF
outcome:
  - drawer has been emptied
  - receipts have been entered into ledger
  - no paper notes or other TODO items on the desk

EOF
  tmux split-window -v -l 70%
  tmux send-keys 'groceries "Edeka, Aldi" "'
  prompt_continue
}

camscanner() {
  should_skip_based_on_state || return
  print_header "$step. Process CamScanner"
  cat <<EOF
outcome:
  - all Daily planner pages scanned
  - all images in "to process" folder have had their text extracted

EOF
  $BROWSER https://www.camscanner.com/file/recent >/dev/null 2>&1 &
  prompt_continue
}

calendar() {
  should_skip_based_on_state || return
  print_header "$step. Check your calendar\n"
  cat <<EOF
outcome:
  - past events are in past.rem
  - wrote down any tasks uncovered related to events in the next 2 weeks

EOF
  lf -remote "send cd '$ORG_CALENDAR/main'" &

  split_below "Calendar" "remint"

  printf "\nShow event calendar next\n"
  prompt_continue

  split_below "Events" "events; remint"

  prompt_continue
}

messenger() {
  should_skip_based_on_state || return
  print_header "$step. Clear out messengers"
  cat <<EOF
outcome:
  - empty signal
  - empty whatsapp

EOF
  prompt_continue
}

otter() {
  should_skip_based_on_state || return
  print_header "$step. Clear out otter"
  cat <<EOF
outcome:
  - no unprocessed transcripts

EOF
  $BROWSER "https://otter.ai/my-notes" >/dev/null 2>&1 &
  prompt_continue
}

browser_tabs() {
  should_skip_based_on_state || return
  print_header "$step. Close all browser tabs"
  cat <<EOF
outcome:
  - only start page open

EOF
  prompt_continue
}

github() {
  should_skip_based_on_state || return
  print_header "$step. Clear your GitHub notifications"
  cat <<EOF
outcome:
  - no notifications
  - up-to-date on GitHub newsfeed

EOF
  $BROWSER https://github.com/dashboard-feed >/dev/null 2>&1 &
  $BROWSER https://github.com/notifications?query=is%3Aunread >/dev/null 2>&1 &

  prompt_continue
}

pre_newsboat() {
  reload-newsboat
}
newsboat() {
  should_skip_based_on_state || return
  print_header "$step. Clear out newsboat"
  cat <<EOF
outcome:
  - no unread feeds

EOF
  split_below "Newsboat" "new; misc"

  prompt_continue
}

bulletjournal() {
  should_skip_based_on_state || return
  print_header "$step. Copy notes from Bullet Journal"
  cat <<EOF
outcome:
  - exported everything useful

EOF

  prompt_continue
}

files() {
  should_skip_based_on_state || return
  print_header "$step. Clear temp directories"
  cat <<EOF
outcome:
  - empty ~, Downloads

EOF
lf -remote "send cd '$HOME/Downloads'" &

prompt_continue
}

pre_org_inbox() {
  fetch-annotations &
  signal-to-inbox &
}
org_inbox() {
  should_skip_based_on_state || return
  print_header "$step. Clear your org inbox"
  cat <<EOF
outcome:
  - $ORG_INBOX is empty

EOF
  if [ -z "$items_in_inbox" ]; then
    items_in_inbox="$(ls $ORG_INBOX/* | wc -l)"
  fi

  lf -remote "send cd '$ORG_INBOX'" &
  prompt_continue
}

task_manager() {
  # excluded because this is seperate for me
  # tasks need their own review process and
  # I need to think about what I want to do over the next week,
  # which I'm not capable off if the weekly review is as long as it currently is
  should_skip_based_on_state || return
  print_header "$step. Choose your tasks for the week"
  cat <<EOF
outcome:
  - taskwarrior has next weeks tasks scheduled and inbox is emtpy

EOF
split_below "Tasks" "task list"

prompt_continue
}

copy_accountability() {
  should_skip_based_on_state || return
  print_header "$step. Copy accountability logs from signal"
  cat <<EOF
outcome:
  - Accountability tasks for all budies copied into org

EOF
  prompt_continue
}

gallery() {
  should_skip_based_on_state || return
  print_header "$step. Extract notes from image gallery"
  cat <<EOF
outcome:
  - Note/todo photos or screenshots are deleted

EOF
  prompt_continue
}

dotfiles() {
  # justification: effort grows exponentially with the number of changes, uncommitted changes at risk of being lost
  should_skip_based_on_state || return
  print_header "$step. Commit all changes in the dotfiles"
  cat <<EOF
outcome:
  - green git status

EOF
  split_below "dotfiles" "dot"
  prompt_continue
}

backups() {
  # justification: needs to be done regularly to avoid loss of data
  should_skip_based_on_state || return
  print_header "$step. Backup the homeserver"
  cat <<EOF
outcome:
  - sync started

EOF
  tmux -u new-window -n "backups" -t main
  tmux send-keys "clear && ho" "Enter"
  tmux send-keys "cd config; lsblk" "Enter" "./sync-backup "
  prompt_continue
}

neomutt() {
  should_skip_based_on_state || return
  print_header "$step. Empty local neomutt"
  cat <<EOF
outcome:
  - no emails

EOF
  split_below "Neomutt" "neomutt"
  prompt_continue
}

monica() {
  should_skip_based_on_state || return
  print_header "$step. Describe social activities in monica"
  cat <<EOF
outcome:
  - all social activities are logged
  - noted conversation details

EOF
  prompt_continue
}

email
github
backups
dotfiles
messenger
gallery
desk
# bulletjournal
camscanner
pre_newsboat
otter
newsboat
browser_tabs
calendar
monica
pre_org_inbox
copy_accountability
files
org_inbox

echo "Congrats! You're done"
calc_total_time
