#!/bin/sh

MAILSYNC_MUTE=true

if [ "$1" = "--help" ] || [ "$1" = "-h" ] || [ "$1" = "help" ]; then
  cat <<EOF
$ mailsync [ACCOUNT]
Sync mail and index it.

Run it:
- via goimapnotify (server has received new mail hook)
- via cron (timer)

Source: https://github.com/LukeSmithxyz/mutt-wizard
Changes: pop removed, notifications disabled, .config/neomvim and .config/isync as config dirs.

Parameters:
  [\$1]: account to sync, by default syncs all

Example:
  $ mailsync
  $ mailsync jneidel@jneidel.com
EOF
  exit
fi

hash mbsync notmuch || exit 127

# There are many arbitrary and ugly features in this script because it is
# inherently difficult to pass environmental variables to cronjobs and other
# issues. It also should at least be compatible with Linux (and maybe BSD) with
# Xorg and MacOS as well.

# Run only if user logged in (prevent cron errors)
pgrep -u "${USER:=$LOGNAME}" >/dev/null || { echo "$USER not logged in; sync will not run."; exit ;}
# Run only if not already running in other instance
pgrep mbsync >/dev/null && { echo "mbsync is already running."; exit ;}

# First, we have to get the right variables for the mbsync file, the pass
# archive, notmuch and the GPG home.  This is done by searching common profile
# files for variable assignments. This is ugly, but there are few options that
# will work on the maximum number of machines.
eval "$(grep -h -- \
	"^\s*\(export \)\?\(MBSYNCRC\|PASSWORD_STORE_DIR\|NOTMUCH_CONFIG\|GNUPGHOME\)=" \
	"$HOME/.profile" "$HOME/.bash_profile" "$HOME/.zprofile"  "$HOME/.config/zsh/.zprofile" "$HOME/.zshenv" \
	"$HOME/.config/zsh/.zshenv" "$HOME/.bashrc" "$HOME/.zshrc" "$HOME/.config/zsh/.zshrc" \
	"$HOME/.pam_environment" 2>/dev/null)"

# export GPG_TTY="$(tty)"

[ -n "$MBSYNCRC" ] && alias mbsync="mbsync -c $MBSYNCRC" || MBSYNCRC=$HOME/.config/isyncrc

lastrun="${XDG_CONFIG_HOME:-$HOME/.config}/neomutt/.mailsynclastrun"

# Settings are different for MacOS (Darwin) systems.
case "$(uname)" in
	Darwin)
		notify() { osascript -e "display notification \"$2 in $1\" with title \"You've got Mail\" subtitle \"Account: $account\"" && sleep 2 ;}
		;;
	*)
		case "$(readlink -f /sbin/init)" in
			*systemd*|*openrc*) export DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$(id -u)/bus ;;
		esac
		# remember if a display server is running since `ps` doesn't always contain a display
		pgrepoutput="$(pgrep -a X\(org\|wayland\))"
		displays="$(echo "$pgrepoutput" | grep -wo "[0-9]*:[0-9]\+" | sort -u)"
		notify() { [ -n "$pgrepoutput" ] && for x in ${displays:-0:}; do
				export DISPLAY=$x
				notify-send --app-name="mutt-wizard" "New mail!" "ðŸ“¬ $2 new mail(s) in \`$1\` account."
			done ;}
		;;
esac

# Check account for new mail. Notify if there is new content.
syncandnotify() {
    acc="$(echo "$account" | sed "s/.*\///")"
    if [ -z "$opts" ]; then mbsync "$acc"; else mbsync "$opts" "$acc"; fi
    new=$(find\
	"$HOME/.local/share/mail/$acc/INBOX/new/"\
	"$HOME/.local/share/mail/$acc/Inbox/new/"\
	"$HOME/.local/share/mail/$acc/inbox/new/"\
	"$HOME/.local/share/mail/$acc/INBOX/cur/"\
	"$HOME/.local/share/mail/$acc/Inbox/cur/"\
	"$HOME/.local/share/mail/$acc/inbox/cur/"\
	-type f -newer "$lastrun" 2> /dev/null)
    newcount=$(echo "$new" | sed '/^\s*$/d' | wc -l)
    case 1 in
	$((newcount > 0)) ) [ -z "$MAILSYNC_MUTE" ] && notify "$acc" "$newcount" ;;
    esac
}

# Sync accounts passed as argument or all.
if [ "$#" -eq "0" ]; then
    accounts="$(awk '/^Channel/ {print $2}' "$MBSYNCRC")"
else
    for arg in "$@"; do
        [ "${arg%${arg#?}}" = '-' ] && opts="${opts:+${opts} }${arg}" && shift 1
    done
    accounts=$*
fi

# Parallelize multiple accounts
for account in $accounts; do
    syncandnotify &
done

wait

notmuch new 2>/dev/null
afew --tag --new
afew --move-mails --all

#Create a touch file that indicates the time of the last run of mailsync
touch "$lastrun"
