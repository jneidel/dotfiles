#! /bin/sh

if [ "$1" = "--help" ] || [ "$1" = "help" ]; then
  cat << EOF mpd-lyrics
Get the lyrics for the current song running in mpd

get-lyrics wrapper

Example:
$ mpd-lyrics
EOF
  exit
fi

. ~/scripts/mpd/shared-mpd-variables

command -v mpc-get >/dev/null &&
  MPC_CMD="mpc-get file" ||
  MPC_CMD="mpc -p $PORT status -f %file% | head -n 1"

if [ "$IS_SERVER" -eq 1 ]; then
  SONG_FILE="$REMOTE_DIR/$($MPC_CMD)"
  [ `ssh $REMOTE_NAME "basename \"$SONG_FILE\"" | rev | cut -d\. -f1` != "3pm" ] && {
    echo "File is not a mp3"
    exit
  }
  get_lyrics() {
    ssh $REMOTE_NAME "~/scripts/get-lyrics \"$1\" \"$2\""
  }
else
  SONG_FILE="$LOCAL_DIR/$($MPC_CMD)"
  echo $SONG_FILE
  [ "$(basename "$SONG_FILE" | rev | cut -d\. -f1)" != "3pm" ] && {
    echo "File is not a mp3"
    exit
  }
  get_lyrics() {
    get-lyrics "$1" "$2"
  }
fi

LYRICS="$(get_lyrics "$SONG_FILE")"
if [ -n "$LYRICS" ]; then
  get_lyrics -n "$SONG_FILE" # Reusing $LYRICS messes with the formatting (newlines)
  echo "














" # with less, if the pane is 16 lines long pressing space will
# always advance by 16 lines, except! when you hit the EOF, then
# it advances until it hits the end (no overflow)
# makes sense, but it leads to no being able to predict where what you
# were reading will continue, these 16 empty lines fix that for ncmpcpp's Y
else
  echo "Song has no lyrics" 1>&2
fi

