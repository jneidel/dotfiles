#! /bin/sh

BASE_DIR="$ORG_MEDIA/manga"
USER_AGENT="User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36"
PARALLEL_DOWNLOAD=99
# At 99 all image requests for the chapter are fired off at the same time.
# Given that a chapter has 30 images, at n=10 you have 3 rounds of requests, at n=15 two rounds.

if [ "$1" = "--help" ] || [ "$1" = "-h" ] || [ "$1" = "help" ]; then
  cat <<EOF
$ mangadl [QUERY]
Download manga.
Uses weebcentral.com as the source.

Download mode:
  Parameters:
    [\$1]: search query
  Flags:
    [-c CHAPTER]: number of the chapter to start downloading at

Update mode:
  Commands:
    update: check for updates and download new chapters
    update list: get a list of subscribed manga
      (To remove an entry use 'skate list @mangadl' and 'skate delete KEY@mangadl'.)
    update new: see which manga have been updated since you last ran this command
    update export: see details on exporting the state

Example:
  $ mangadl naruto
  $ mangadl one punch -c 100
  $ mangadl update
  $ mangadl update new
EOF
  exit
fi

hash curl wget gum node pcregrep skate || exit 127

seriesId=
seriesTitle=
chapterList=$(mktemp)
startingChapter=
query=

get_series_id_from_query() {
  query=`node -e "console.log( encodeURIComponent( '$1' ) )"`
  result=`curl "https://weebcentral.com/search/data?author=&text=$query&sort=Best%20Match&order=Descending&official=Any&anime=Any&adult=Any&display_mode=Full%20Display" -Ss -H "$USER_AGENT" \
    | grep -Po '/series/\K[^"]+' | uniq | gum choose`
  [ $? -gt 0 ] && exit 0
  seriesId=$(echo $result | cut -d/ -f1)
  seriesTitle=$(echo $result | cut -d/ -f2)
}

fetch_chapter_list() {
  seriesId="$(echo $seriesId | tr a-z A-Z)"
  curl "https://weebcentral.com/series/$seriesId/full-chapter-list" -Ss -H "$USER_AGENT" \
    | pcregrep -Mo1 -o2 -o3 --om-separator=, ">([#A-Za-z1-9- ]+) (\d+\.?\d*)[^\']*'([A-Z0-9]+)" >$chapterList
}

determine_starting_chapter() {
  nMin=$(tail -n1 $chapterList | cut -d, -f2)
  nMax=$(head -n1 $chapterList | cut -d, -f2)
  startingChapter=`gum input --placeholder "$nMin" --prompt "Start downloading at chapter ($nMin-$nMax): "`
  [ $? -gt 0 ] && exit 0
  [ -z "$startingChapter" ] && startingChapter="$nMin"
  # validate $startingChapter
}

download_chapter_images() {
  chapterId="$1"
  chapterNum="$2"
  chapterType="$3"
  dir="/tmp/$seriesTitle-$chapterNum"
  if [ -n "$chapterType" ]; then
    dir="/tmp/$seriesTitle-${chapterNum}$chapterType"
  fi

  mkdir -p "$dir"
  cd "$dir"
  echo "$dir"
  curl "https://weebcentral.com/chapters/$chapterId/images?is_prev=False&current_page=1&reading_style=long_strip" -Ss -H "$USER_AGENT" \
    | grep -Po "src=\"\K[^\"]+" | xargs -n 1 -P $PARALLEL_DOWNLOAD nice wget -q --header 'Referer: https://weebcentral.com/'

  exitCode=$?
  if [ "$exitCode" -gt 0 ]; then
    echo "Download ran into an error (exit code $exitCode).\nThe image page below might have more info (e.g. if IP was blocked.)" >&2
    curl "https://weebcentral.com/chapters/$chapterId/images?is_prev=False&current_page=1&reading_style=long_strip" -Ss -H "$USER_AGENT" \
      | grep -Po "src=\"\K[^\"]+" | head >&2
    exit 1
  fi
}

download_chapters() {
  tac $chapterList | grep ",$startingChapter," -A9999 | while read -r chap; do
    chapterType=`echo "$chap" | cut -d, -f1`
    chapterNum=`echo "$chap" | cut -d, -f2`
    chapterId=`echo "$chap" | cut -d, -f3`
    if [ "$chapterType" = "Chapter" ] || [ "$chapterType" = "#" ]; then
      chapterType=
    else
      chapterType="-$chapterType"
    fi

    echo "Downloading chapter $chapterNum"
    downloadDir=`download_chapter_images $chapterId "$chapterNum" "$chapterType"`
    cd "$downloadDir"
    outDir="$BASE_DIR/$seriesTitle"
    outFile="$outDir/$seriesTitle-${chapterNum}$chapterType.cbz"
    mkdir -p "$outDir"
    if nice zip -r "$outFile" * >/tmp/mangadl-zip-output.txt; then
      echo "Wrote $outFile"
    else
      echo "Writting the zip file ran into an error.\nOutput:" >&2
      cat /tmp/mangadl-zip-output.txt >&2
      echo "Also see contents of download directory: $downloadDir" >&2
      exit 1
    fi
  done

  if [ "$isUpdateMode" -eq 0 ]; then
    if gum confirm "Subscribe to updates? (Check for and download updates with 'mangadl update')"; then
      skate set "$seriesId.title@mangadl" "$(echo "$seriesTitle" | sed 's/-/ /g')"
      chapterNum=`head -n1 $chapterList | cut -d, -f2`
      skate set "$seriesId.chapter@mangadl" "$(echo "$chapterNum + 1" | sed -r 's/\.[^ ]+//' | bc)"
    fi
  fi
}

export_update_state() {
  echo "This command will recreate the state on another machine (hide this message with 2>/dev/null):\n(Binary files of the state are also available in ~/.local/share/charm/kv/mangadl)\n" >&2
  skate list @mangadl | awk '{
    key = $1
    value = "";
    for (i = 2; i <= NF; i++) value = value $i (i < NF ? " " : "")
    print "skate set " key "@mangadl \"" value "\""
  }'
}

list_update_manga() {
  skate list @mangadl -k | cut -d. -f1 | sort -u | while read id; do
    echo "$(skate get $id.title@mangadl): $(skate get $id.chapter@mangadl)"
  done
}

download_updates() {
  skate list @mangadl -k | cut -d. -f1 | sort -u | while read seriesId; do
    titleClean=$(skate get $seriesId.title@mangadl)
    seriesTitle=$(echo $titleClean | sed 's/ /-/g')
    startingChapter=$(skate get $seriesId.chapter@mangadl)

    echo "Check for updates of '$titleClean', starting at chapter $startingChapter."
    fetch_chapter_list
    latestChapter=`head -n1 $chapterList | cut -d, -f2`
    if [ -n "$(tac $chapterList | grep ",$startingChapter," -A9999)" ]; then
      download_chapters

      skate set "$seriesId.chapter@mangadl" "$(echo "$latestChapter + 1" | sed -r 's/\.[^ ]+//' | bc)"
      echo "$titleClean" >> "${XDG_DATA_HOME:-$HOME/.local/shared}/mangadl-new"
    else
      echo "No updates available (latest was $latestChapter.)" >&2
    fi
  done
}

list_new_updates() {
  file="${XDG_DATA_HOME:-$HOME/.local/shared}/mangadl-new"
  if sort -u $file 2>/dev/null; then
    if gum confirm "Clear the list of new updates?"; then
      rm $file
    fi
  else
    echo "No new updates. Have you run 'mangadl update'?" >&2
  fi
}

isUpdateMode=0
if [ "$1" = "update" ]; then
  isUpdateMode=1

  if [ -z "$2" ]; then
    download_updates
  else
    case "$2" in
      list) list_update_manga;;
      new) list_new_updates;;
      export) export_update_state;;
      *) echo "Invalid command '$2'. See --help." >&2;;
    esac
  fi
else
  while [ "$#" -gt 0 ]; do
    case "$1" in
      -c)
        shift
        startingChapter="$1" ;;
      *) query="$query $1" ;;
    esac
    shift
  done
  query=$(echo "$query" | sed 's/^ //')

  if [ -z "$query" ]; then
    query=`gum input --placeholder "" --prompt "Manga to download: "`
  fi

  get_series_id_from_query "$query"
  fetch_chapter_list
  if [ -z "$startingChapter" ]; then
    determine_starting_chapter
  fi
  download_chapters
fi
