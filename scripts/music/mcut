#! /bin/bash

if [ "$1" = "--help" ] || [ "$1" = "-h" ] || [ "$1" = "help" ] || [ -z "$1" ]; then
  cat << EOF
$ mcut FILE START [END]
Easily cut mp3 files. (mp3cut alternative)
Test until you find the right timing and then overwrite the file.

Parameters:
  \$1: input file
  \$2: start time
  [\$3]: end time, default: end of the song

Time Format:
  00:00.000, min:sec.mili

Flags:
  -r, replace the input file with the cut version

Example:
  $ mcut "Beastie Boys - The Sounds of Science.mp3" 01:39
  $ mcut "Beastie Boys - The Sounds of Science.mp3" 01:39 1:50.4
  $ mcut "Beastie Boys - The Sounds of Science.mp3" 01:39 1:50.4 -r
EOF
  exit
fi

command -v ffmpeg >/dev/null || { echo "ffmpeg is not installed"; exit 127; }
command -v ~/scripts/music/copy_id3.py >/dev/null || { echo "~/scripts/music/copy_id3.py is not installed"; exit 127; }

mp3cut() { # mp3cut
  local input="$1"
  local output="$2"
  local start_time="$3"
  local end_time="$4"

  if [ -z "$end_time" ] || [ "$end_time" = "00:00:00" ]; then
    ffmpeg -i "$input" -ss "$start_time" -acodec copy -loglevel error "$output"
  else
    ffmpeg -i "$input" -ss "$start_time" -to "$end_time" -acodec copy -loglevel error "$output"
  fi
}

IN="$1"
EXT="${IN##*.}"
OUT="${IN%.*}-new.$EXT"

if [ -z "$2" ]; then
  mpv --profile=music "$IN"
  exit 0
fi

START="$2"
END="$3"

REPLACE=0
if [ "$3" = "-r" ]; then
  REPLACE=1
  END=
fi
[ "$4" = "-r" ] && REPLACE=1

if [ "$REPLACE" -gt 0 ]; then
  mp3cut "$IN" "$OUT" "$START" "$END"
  echo "=== Replacing original with cut version ==="
  ~/scripts/music/copy_id3.py "$IN" "$OUT"
  mv "$OUT" "$IN"
  chmod -x "$IN"
else
  temp=$(mktemp --dry-run --suffix ".$EXT")
  mp3cut "$IN" "$temp" "$START" "$END"
  mpv --profile=music $temp
  rm $temp
fi
