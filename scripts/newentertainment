#! /bin/sh

DATE_FILE=$HOME/.local/share/newentertainment_date
PENS_FILE=$HOME/.local/share/newentertainment_pensum
DIR=$HOME/ct/dont_touch
ORDER=$DIR/order
MOVED=$DIR/moved
WATCH_DIR=$HOME/ct/movies
FULL_PENSUM=240
TESTING=0

if [ "$1" = "--help" ] || [ "$1" = "-h" ] || [ "$1" = "help" ] || [ ! -d "$DIR" ] || [ ! -d "$WATCH_DIR" ] || [ ! -e "$ORDER" ]; then
  cat << EOF
$ newentertainment
Regulate media consumption, by limiting access to ${FULL_PENSUM}m a day.
This is done by sorting media into categories (m,s20,s60 - movies, series 20m, series 60m)
  and filling a list with the order you'd like to watch these in.
This script itself keeps watch over how much time you have left for today and giving you access to the next item in your watch list.

Set these variables in the script:
- directory that contains the media files: $DIR
- watch list: $ORDER
- directory that you move the media files to that you have allowed yourself to watch: $WATCH_DIR
- backup directory for everything that is moved: $MOVED
EOF
  exit
fi

PENSUM="$(cat $PENS_FILE || $FULL_PENSUM)"

if [ "$(date -d "$(cat $DATE_FILE)" +%s)" -gt "$(date -d 'today 0' +%s)" ]; then
  if [ "$PENSUM" -eq 0 ]; then
    echo "info: You had your share for today. Check in tomorrow."
    exit 0
  else
    echo "info: Using leftover pensum of: $PENSUM"
  fi
else
  echo "info: First usage with pens of $FULL_PENSUM"
  PENSUM=$FULL_PENSUM
  printf $FULL_PENSUM > $PENS_FILE
fi

# pensum can't behandled in a variable, as its inconsistend between functions
PENSUM_FILE=$(mktemp)
printf $PENSUM > $PENSUM_FILE
read_pensum() {
  cat $PENSUM_FILE
}
write_pensum() {
  printf $1 > $PENSUM_FILE
}

has_pensum() {
  media_type="$1"
  pensum=$(read_pensum)
  case "$media_type" in
    s60) [ "$pensum" -ge 60 ] && true || false;;
    s30) [ "$pensum" -ge 30 ] && true || false;;
    s20) [ "$pensum" -ge 20 ] && true || false;;
    m) [ "$pensum" -ge 120 ] && true || false;;
  esac
}

decrement_pensum() {
  media_type="$1"
  case "$media_type" in
    s60) write_pensum $(($(read_pensum) - 60));;
    s30) write_pensum $(($(read_pensum) - 30));;
    s20) write_pensum $(($(read_pensum) - 20));;
    m) write_pensum $(($(read_pensum) - 120));;
  esac
  echo "pens: $media_type $(read_pensum)"
}

rm_line() {
  line="$1"
  tmp=$(mktemp)
  grep -Fv "$line" $ORDER > $tmp
  cp $tmp $ORDER
}

move() {
  file="$1"
  filename="$(basename "$1")"
  cd "$DIR"
  echo "move: $filename"
  [ "$TESTING" -eq 0 ] && mv "$1" "$MOVED"
  [ "$TESTING" -eq 0 ] && ln -sf "$MOVED/$filename" "$WATCH_DIR/$filename"
}

handle_series() {
  name="$1"

  firstOnOrder="$(head "$ORDER" -n1)"
  if [ "$firstOnOrder" != "$name" ]; then
    printf "'$name' is not the first entry in order.\nContinue? (y/N): "
    read ans
    [ "$ans" != "y" ] && return 13
  fi

  media_type=`echo $name | cut -d\/ -f1`
  find "$DIR/$name" -regextype posix-extended -regex '.*\.(mkv|mp4|avi)' | sort | while read -r file; do
    if has_pensum $media_type; then
      move "$file"
      decrement_pensum $media_type
      return 12 # break after each item
    fi

    # if [ "$(read_pensum)" -eq "$(($FULL_PENSUM/2))" ]; then
    #   echo "info: Breaking at half pensum: $(read_pensum)"
    #   return 12 # exit early
    # fi
  done
}
handle_movie() {
  name="$1"

  firstOnOrder="$(head "$ORDER" -n1)"
  if [ "$firstOnOrder" != "$name" ]; then
    printf "'$name' is not the first entry in order.\nContinue? (y/N): "
    read ans
    [ "$ans" != "y" ] && return 13
  fi

  move "$name"
  decrement_pensum m
  [ "$TESTING" -eq 0 ] && rm_line "$1"
}

while read -r name <&10; do
  case $name in
    s60*|s20*|s30*)
      has_pensum `echo $name | cut -d\/ -f1` || break

      handle_series "$name"
      EXIT_CODE="$?"
      if [ "$EXIT_CODE" -eq 12 ] || [ "$EXIT_CODE" -eq 13 ]; then
        break
        # 12: break
        # 13: not first entry in order, user exit
      fi ;;
    m*)
      has_pensum `echo $name | cut -d\/ -f1` || break

      handle_movie "$name"
      break;; # break after each movie
  esac
done 10<$ORDER # 10 as not to block other read calls

[ "$TESTING" -eq 0 ] && printf `read_pensum` > $PENS_FILE # write to persistent pensum file
[ "$TESTING" -eq 0 ] && date >$DATE_FILE
